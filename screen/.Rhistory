optparse::OptionParser
OptionParser
dirfns
> library(dirfns)
library(dirfns)
groups
q()
n
clusts
clusts[,1]
clusts[1,]
apply(clusts,2,unique)
get.hyper
statplot
clusts
statplot
dot.stat
clusthyper
moreComplexHeatmap::
condHyper
dotPscale
dat
row.names(groups)
cond
conds
clusts
typeof(clusts)
lapply(clusts,function(c) lapply(pheno,function(p) condHyper(row.names(pheno),p,c)))
lapply(pheno,function(p) condHyper(row.names(pheno),p,clusts[,1]))
pheno
dim(pheno)
condHyper(row.names(pheno),pheno[,1],clusts[,1])
mapply(pheno,2,function(p) condHyper(row.names(pheno),p,clusts[,1])
)
apply(pheno,2,function(p) condHyper(row.names(pheno),p,clusts[,1]))
lapply(pheno,function(p) condHyper(row.names(pheno),p,clusts[,1]))
lapply(as.data.frame(pheno),function(p) condHyper(row.names(pheno),p,clusts[,1]))
lapply(as.data.frame(clusts),function(c) lapply(as.data.frame(pheno),function(p) condHyper(row.names(pheno),p,c)))
lapply(as.data.frame(clusts),function(c) lapply(as.data.frame(pheno),function(p) condHyper(row.names(pheno),p,c)))
length(phenohyper)
sapply(phenohyper,length)
sapply(phenohyper,length)
phenohyper[1]
phenohyper[[1]]
phenohyper[[1]][[1]]
odds
odds[[1]]
odds[[2]]
odds[[3]]
odds[[4]]
sapply(odds,dim)
names(odds)
repeat
()
repeat('a',3)
repeat('a')
rep('e',3)
csplit
csplit
)
odds
pheno
pheno[1]
pheno[1,]
names(hyper)
names(phenohyper)
odds
names(hyper)
pheno
is.data.frame(pheno)
hyper
sapply(odds,dim)
sapply(hyper[[1]],dim)
rowsplit
hyper
hyper[[1]]
hyper[[1]][[1]]
hyper[[1]][[2]]
rowsplit
names(hyper[[1]])
rowsplit
q
qval
dotPscale
qval
is.finite(qval)
is.finite(as.matrix(qval))
dotPscale
col.z
pheno
pheno[1,]
rowsplit
odds
length(rowsplit)
dim(odds)
odds
dim(fdr)
lrtab
E
E[[1]]
E[[1]][1,]
lrcsv
lrtab
E[1,]
E[[1]][1,]
C[[1]][1,]
names(E)
names(C)
dotPscale
hmdot
groups
groups$Phenotype
do.call(cbind,C)
dim(do.call(cbind,C))
14*5
names(C)
csplit
?Heatmap
??Heatmap
?ComplexHeatmap::Heatmap
Heatmap
umap
library(umap)
umap(E[[1]])
library(umap)
umap(E[[1]])
umap(E[[1]])$layout
names(E)
length(plots)
pca(E[[i]])
prcomp(E[[i]])
prcomp(E[[1]])
prcomp(E[[1]])[,1:2]
names(prcomp(E[[1]]))
prcomp(E[[1]])$x[,1:2]
Heatmap
ln
log
log(softclust)
dim(log(softclust))
dim(logits)
sum(softclust<0)
sum(softclust==0)
q()
y
E
E$1
E$`1`
prcomp(E[[1]])
prcomp(E[[1]])[[1]]
prcomp(E[[1]])[1]
prcomp(E[[1]])[2]
prcomp(E[[1]])[3]
prcomp(E[[1]])[4]
prcomp(E[[1]])[5]
prcomp(E[[1]])[1,]
prcomp(E[[1]])$PCA
prcomp(E[[1]])$data
?prcomp
?C
NvimR.selection()
NvimR.selection()
NvimR.selection()
source("R/clustplots.R")
NvimR.selection()
E_c  <- read.csv(paste0(opts$dir,'/E_consensus.csv'))
E_c
head(E_c)
C_c  <- read.csv(paste0(opts$dir,'/C_consensus.csv'))
E_umap  <-  as.data.frame(umap(E_c)$layout)
library(umap)
E_umap  <-  as.data.frame(umap(E_c)$layout)
E_umap
umap_E  <-  as.data.frame(umap(E_c)$layout)
names(umap_E)
names(umap_E) <- c("UMAP1","UMAP2")
C[[1]]
C_c
NvimR.selection()
C.c
NvimR.selection()
logits_c
range(logits_c)
attr
clusts
clusts_c  <- read.csv(paste0(opts$dir,'/clusts_consensus'))
clusts_c  <- read.csv(paste0(opts$dir,'/clust_consensus'))
list.files()
list.files('data')
clusts_c  <- read.csv(paste0(opts$dir,'/clusts_consensus.csv'))
clusts_c
clusts_c[1]
NvimR.selection()
source("R/clustplots.R")
library(ggplot2)
NvimR.selection()
arrange.plots(plot_E,c("Cluster","Phenotype","Condition"),out="data/consensus_umap")
arrange.plots
plot_E[[1]]
plot_E
ggplot(umap_E) + geom_point()
plot_E[[1]]$data
draw(ggplot(umap_E) + geom_point())
plot(ggplot(umap_E) + geom_point())
graphics.off()
arrange.plots(plot_E,c("Cluster","Phenotype","Condition"),out="data/consensus_umap")
NvimR.selection()
clusts_c)
clusts_c
as.character(clusts_c)
as.character(clusts_c[,1])
NvimR.selection()
NvimR.selection()
umap_E
umap_E$Cluster
NvimR.selection()
pheno
pheno$TVC.
pheno$TVC.division
pheno
clusts
NvimR.selection()
hyper_c
NvimR.selection()
hyper_c
NvimR.selection()
NvimR.selection()
NvimR.selection()

hyper_c$odds_c <- hyperattr(hyper_c,"log2OR")
odds_c <- hyperattr(hyper_c,"log2OR")
sapply(hyper_c,'[',"log2OR")
NvimR.selection()
odds_c <- do.call(cbind,sapply(hyper_c,'[',"log2OR"))
sapply(hyper_c,'[',"log2OR")
do.call(cbind,sapply(hyper_c,'[',"log2OR"))
do.call(rbind,sapply(hyper_c,'[',"log2OR"))
NvimR.selection()
NvimR.selection()
source("R/clustplots.R")
library(moreComplexHeatmap)
NvimR.selection()
row_split
rowsplit
hyper[[1]]
length(hyper)
hyper
length(hyper_c)
hyper_c
p[heno
pheno
hyper_c
length(hyper_c[[1]])
hyper_c[[1]]
hyper_c
NvimR.selection()
hyper_c[[1]]
hyper_c
names(hyper_c)
NvimR.selection()
pheno
row.names(pheno)
condHyper
clusts_c
condHyper
cond_c <- condHyper(row.names(pheno),groups$Condition,clusts_c)
cond_c
NvimR.selection()
NvimR.selection()
NvimR.selection()
q()
