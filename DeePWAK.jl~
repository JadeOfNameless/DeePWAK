using Flux, CUDA, LinearAlgebra, ProgressMeter, TensorOperations,
    TensorCast

mutable struct DeePWAK
    epochs::Int
    opt::Flux.Optimizer
    loader::Flux.DataLoader
    X::AbstractArray{Union{Float32,Float64}}
    δ::Chain
    L
end

function wak(G)
    #Matrix -> Matrix
    #returns G with row sums normalized to 1
    G = G .* (1 .- I)
    W = sum(G,dims=2)
    K = G ./ W
    K[isnan.(K)] .= 0
    return K
end

function dewak(X,G)
    M = wak(G)
    return Flux.mse(X,M * X)
end

function γ(D)
    C = mapslices(softmax,D)
    P = C * C'
    return P
end

function dist(Δ::DeePWAK,X)
    mapslices(X,1

function predict(Δ::DeePWAK,X)
    D = dist(Δ,X)

function L(Δ::DeePWAK,X,Y)
    Ŷ = predict(Δ,X)
